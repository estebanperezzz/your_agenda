generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  image         String?
  emailVerified DateTime?

  accounts      Account[]
  sessions      Session[]
  TipoUsuario   UsuarioTipoUsuario[]
  TrabajadorServicio TrabajadorServicio[]
  Reservas      Reserva[]
  Post          Post[]
}




model TipoUsuario {
  id      Int               @id @default(autoincrement())
  nombre  String
  UsuarioTipoUsuario UsuarioTipoUsuario[]
}

model UsuarioTipoUsuario {
  id            Int          @id @default(autoincrement())
  usuario       User?     @relation(fields: [usuario_id], references: [id])
  usuario_id    String?
  tipo_usuario  TipoUsuario? @relation(fields: [tipo_usuario_id], references: [id])
  tipo_usuario_id Int?
}

model Local {
  id          Int               @id @default(autoincrement())
  nombre      String
  telefono    String?
  direccion   String?
  LocalServicio LocalServicio[]
  TrabajadorLocalServicio TrabajadorLocalServicio[]
}

model Servicio {
  id          Int               @id @default(autoincrement())
  nombre      String
  TrabajadorServicio TrabajadorServicio[]
  LocalServicio LocalServicio[]
}

model LocalServicio {
  id          Int               @id @default(autoincrement())
  local       Local?            @relation(fields: [local_id], references: [id])
  local_id    Int?
  servicio    Servicio?         @relation(fields: [servicio_id], references: [id])
  servicio_id Int?
}

model TrabajadorServicio {
  id          Int               @id @default(autoincrement())
  usuario     User?          @relation(fields: [usuario_id], references: [id])
  usuario_id  String?
  servicio    Servicio?         @relation(fields: [servicio_id], references: [id])
  servicio_id Int?
  TrabajadorLocalServicio TrabajadorLocalServicio[]
}

model TrabajadorLocalServicio {
  id                      Int               @id @default(autoincrement())
  trabajador_servicio     TrabajadorServicio? @relation(fields: [trabajador_servicio_id], references: [id])
  trabajador_servicio_id  Int?
  local                   Local?            @relation(fields: [local_id], references: [id])
  local_id                Int?
  HorariosDisponibles     HorarioDisponible[]
}

model HorarioDisponible {
  id                         Int               @id @default(autoincrement())
  trabajador_local_servicio  TrabajadorLocalServicio? @relation(fields: [trabajador_local_servicio_id], references: [id])
  trabajador_local_servicio_id Int?
  dia_semana                 String
  hora_inicio                DateTime
  hora_fin                   DateTime
  Reservas                   Reserva[]
}

model Reserva {
  id                    Int               @id @default(autoincrement())
  cliente               User?          @relation(fields: [cliente_id], references: [id])
  cliente_id            String?
  horario_disponible    HorarioDisponible? @relation(fields: [horario_disponible_id], references: [id])
  horario_disponible_id Int?
  fecha_reserva         DateTime
  estado                String?
  created_at            DateTime? @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  type               String 
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String
}

